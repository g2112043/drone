2023/01/30

input にのみ乱数を与えていた場合とinput, estimatorに乱数を与えた結果の比較
estimatorにも乱数を与えたほうがRMSEが小さかった

推定システムのシミュレーション結果と，検証用データの出力結果がちょうど１ステップ分ずれていたので検証
結果，推定したシステムの検証シミュレーションで問題があったので修正

修正前) 
for i = 1:1:simResult.reference.N-2
    simResult.Z(:,i+1) = est.Ahat * simResult.Z(:,i) + est.Bhat * simResult.U(:,i);
    simResult.Xhat(:,i+1) = est.Chat * simResult.Z(:,i); <====ここ
end

修正後)
for i = 1:1:simResult.reference.N-2
    simResult.Z(:,i+1) = est.Ahat * simResult.Z(:,i) + est.Bhat * simResult.U(:,i);
    simResult.Xhat(:,i+1) = est.Chat * simResult.Z(:,i+1);<===ここ
end


・シミュレーション①
現状，学習用データで用いているシミュレーションにおいて目標軌道は鞍型のみになっている
この状態でハート形の軌道を目標値とした検証用データで推定したシステムを検証した結果
推定精度が悪いことが分かった

ハート形の軌道を目標軌道とした場合の検証データを用いた検証結果はEstimationResult_Heart_Obs_Xonly.matに記録されている
追記）上の推定結果は観測量に状態のみを設定した時のものだった（精度確かめるために設定変更したのを忘れてた）

・シミュレーション②
観測量にeulerAngleParameter_InputAndConstを設定
この状態でハート形の軌道を目標値とした検証用データで推定したシステムを検証
推定結果は一応，こちらの観測量を設定したほうがRMSEが全体的には小さくなっている．
ただし，z方向速度のRMSEのみ観測量=状態のときのほうが小さい．一応
この結果はEstimationResult_Heart_Obs_Input_And_Const.matに保存されている

学習データが鞍型の軌道のみであることが問題か

ハート形の軌道を学習データに追加するのは恣意的すぎる気がする
ReferenceをP2Pかつ，実行時にランダム生成させる？

・シミュレーション③
観測量にeulerAngleParameter_InputAndConstを設定
鞍型を目標とした検証データをもとに検証シミュレーションを実施
結果，およそ25StepまではRMSEが10^-3オーダーで抑えられていた
この結果はEstimationResult_Kura_Obs_InputAndConst.matに保存されている

ちなみに観測量に状態をそのまま使用した場合は70Step先までよく推定できていた
こっちの結果はEstimationResult_Kura_Obs_Xonly.matに保存されている
